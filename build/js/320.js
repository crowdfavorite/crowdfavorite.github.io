"use strict";(self.webpackChunkcrowdfavorite_github_io=self.webpackChunkcrowdfavorite_github_io||[]).push([[320],{1814:(e,t,n)=>{n.d(t,{Z:()=>N});var l=n(7294),a=n(5697),s=n.n(a);const r=function(e){let{title:t}=e;return l.createElement("h1",null,t)};r.propTypes={title:s().string.isRequired};const o=r;var i=n(9655);function c(e){let{size:t,className:n,title:a,path:s}=e;const r="inline-block align-middle"+(n?` ${n}`:"");return l.createElement("i",{className:r,title:a},l.createElement("svg",{className:"micon",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",height:t,width:t,fill:"currentColor"},s))}c.defaultProps={size:"24px",className:"",path:""},c.propTypes={size:s().string,className:s().string,title:s().string.isRequired,path:s().string};const d=c;function p(e){let{size:t="",className:n="",title:a=""}=e;return l.createElement(d,{size:t,className:n,title:a,path:l.createElement("path",{d:"M6 19h3v-6h6v6h3v-9l-6-4.5L6 10Zm-2 2V9l8-6 8 6v12h-7v-6h-2v6Zm8-8.75Z"})})}p.defaultProps={size:"24px",className:""},p.propTypes={size:s().string,className:s().string,title:s().string.isRequired};const m=p,h=function(){return l.createElement(i.rU,{to:"/",className:"action-link"},l.createElement(m,{title:"home",size:"20px"}),l.createElement("span",{className:"action-label"},"Home"))};function u(e){let{size:t,className:n,title:a}=e;return l.createElement(d,{size:t,className:n,title:a,path:l.createElement(l.Fragment,null,l.createElement("path",{d:"M0 0h24v24H0V0z",fill:"none"}),l.createElement("path",{d:"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"}))})}u.defaultProps={size:"24px",className:""},u.propTypes={size:s().string,className:s().string,title:s().string.isRequired};const f=u,g=function(e){let{url:t}=e;return l.createElement(i.rU,{className:"action-link",to:t},l.createElement(f,{title:"Next"}),l.createElement("span",{className:"action-label"},"Next"))};g.propTypes={url:s().string.isRequired};const w=g,b=function(e){let{downloadUrl:t,downloadFile:n}=e;return l.createElement("a",{className:"action-link download",href:""+("https://crowdfavorite.github.io"+t),download:n},l.createElement("i",{className:"micon micon-download micon-grey micon-xs"}),l.createElement("span",{className:"action-label"},"Download the code"))};b.propTypes={downloadUrl:s().string.isRequired,downloadFile:s().string.isRequired};const E=b,v=function(e){let{title:t,downloadUrl:n,downloadFile:a,nextUrl:s}=e;return l.createElement("div",{className:"action-bar"},t?l.createElement(o,{title:t}):null,l.createElement("div",{className:"actions"},n&&a?l.createElement(E,{downloadUrl:n,downloadFile:a}):null,l.createElement(h,null),s?l.createElement(w,{url:s}):null))};v.defaultProps={title:null,nextUrl:null,downloadUrl:null,downloadFile:null},v.propTypes={title:s().string,nextUrl:s().string,downloadUrl:s().string,downloadFile:s().string};const N=v},320:(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var l=n(7294),a=n(8093),s=n(3366),r=n(1814);var o=n(3286);function i(){return l.createElement(l.Fragment,null,l.createElement(r.Z,{title:"Php CS Sniffer"}),l.createElement(o.a,{style:{marginBottom:"2rem"}},l.createElement(o.a.Item,{href:"/"},"Home"),l.createElement(o.a.Item,{href:"#/code/style/phpcodesniffer",selected:!0},"Php code sniffer")),l.createElement("div",{className:"parser"},l.createElement(a.D,{rehypePlugins:[s.Z],children:'PHP_CodeSniffer is a set of two PHP scripts; the main phpcs script that tokenizes PHP, JavaScript and CSS files to detect violations of a defined coding standard.\n\n## Installation\n\nThe installation and configuration of the package are detailed below\n\n### Composer\n```\ncomposer require --dev "squizlabs/php_codesniffer=*"\ncomposer require --dev wp-coding-standards/wpcs\n```\nIn composer.json the following script should be added \n```\n"phpcs": "phpcs --standard=phpcs.xml"\n```\nAnd then run composer update.\n\nTo make CodeSniffer aware of the added coding standard, type on the console terminal \n```\nvendor/bin/phpcs --config-set installed_paths vendor/wp-coding-standards/wpcs\n```\n### PhpStorm\n\nIn PhpStormâ€™s preferences php quality tools menu \n<br>\nPhpStorm > Languages & Frameworks > PHP > Quality Tools\n<br>\nPoint to  PHP CodeSniffer located at\n<br>\nvendor > squizlabs > php_codesniffer > bin > phpcs\n<br>\nThen click on the validate button.\n\nWordpress mainly follows PSR-12 however you can download a custom ruleset from\n<br>\n<p class="m-0 mb-05"><a class="link" href="/code/style/phpcs.xml" download="phpcs.xml">Wordpress preset</a></p>\n\nIn the php code sniffer inspection options choose custom as ruleset and point to the file phpcs.xml placed at the root of the project folder.\n\n\n### References\n<p class="m-0 mb-05"><a class="link" href="https://www.jetbrains.com/help/phpstorm/using-php-code-sniffer.html#enabling-tool-inspection" target="_blank">PhpStorm documentation</a></p>\n<p class="m-0 mb-05"><a class="link" href="https://github.com/squizlabs/PHP_CodeSniffer" target="_blank">Code sniffer Github</a></p>\n'})),l.createElement(r.Z,null))}}}]);