"use strict";(self.webpackChunkcrowdfavorite_github_io=self.webpackChunkcrowdfavorite_github_io||[]).push([[233],{2192:(e,n,t)=>{t.d(n,{Z:()=>h});var l=t(7294);const a=e=>{let{title:n}=e;return l.createElement("h1",null,n)};var s=t(9655),i=t(5274);const c=e=>{let{size:n="24px",className:t="",title:a=""}=e;return l.createElement(i.Z,{size:n,className:t,title:a,path:l.createElement("path",{d:"M6 19h3v-6h6v6h3v-9l-6-4.5L6 10Zm-2 2V9l8-6 8 6v12h-7v-6h-2v6Zm8-8.75Z"})})},o=()=>l.createElement(s.rU,{to:"/",className:"action-link"},l.createElement(c,{title:"home",size:"20px"}),l.createElement("span",{className:"action-label"},"Home")),r=e=>{let{size:n="24px",className:t="",title:a=""}=e;return l.createElement(i.Z,{size:n,className:t,title:a,path:l.createElement(l.Fragment,null,l.createElement("path",{d:"M0 0h24v24H0V0z",fill:"none"}),l.createElement("path",{d:"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"}))})},d=e=>{let{url:n}=e;return l.createElement(s.rU,{className:"action-link",to:n},l.createElement(r,{title:"Next"}),l.createElement("span",{className:"action-label"},"Next"))},m=e=>{let{size:n="24px",className:t="",title:a=""}=e;return l.createElement(i.Z,{size:n,className:t,title:a,path:l.createElement("path",{d:"M6 20q-.825 0-1.412-.587Q4 18.825 4 18v-3h2v3h12v-3h2v3q0 .825-.587 1.413Q18.825 20 18 20Zm6-4-5-5 1.4-1.45 2.6 2.6V4h2v8.15l2.6-2.6L17 11Z"})})},p=e=>{let{downloadUrl:n,downloadFile:t}=e;return l.createElement("a",{className:"action-link download",href:""+("https://crowdfavorite.github.io"+n),download:t},l.createElement(m,{size:"20px"}),l.createElement("span",{className:"action-label"},"Download the code"))},h=e=>{let{title:n,downloadUrl:t,downloadFile:s,nextUrl:i}=e;return l.createElement("div",{className:"action-bar"},n?l.createElement(a,{title:n}):null,l.createElement("div",{className:"actions"},t&&s?l.createElement(p,{downloadUrl:t,downloadFile:s}):null,l.createElement(o,null),i?l.createElement(d,{url:i}):null))}},2873:(e,n,t)=>{t.d(n,{Z:()=>d});var l=t(7294),a=t(5697),s=t.n(a),i=t(5274);const c=e=>{let{size:n="24px",className:t="",title:a="Copy to clipboard"}=e;return l.createElement(i.Z,{size:n,className:t,title:a,path:l.createElement("g",null,l.createElement("g",null,l.createElement("g",null,l.createElement("path",{d:"M16,20H4c-0.6,0-1-0.4-1-1V1c0-0.6,0.4-1,1-1h12c0.6,0,1,0.4,1,1v18C17,19.6,16.6,20,16,20z M5,18h10V2H5V18z"}))),l.createElement("g",null,l.createElement("g",null,l.createElement("path",{d:"M20,24H8c-0.6,0-1-0.4-1-1v-4c0-0.6,0.4-1,1-1s1,0.4,1,1v3h10V6h-3c-0.6,0-1-0.4-1-1s0.4-1,1-1h4c0.6,0,1,0.4,1,1v18C21,23.6,20.6,24,20,24z"}))))})},o=e=>{let{code:n}=e;return l.createElement("button",{type:"button",onClick:()=>navigator.clipboard.writeText(n[0].props.children[0]),className:"copy",title:"Copy to clipboard"},l.createElement(c,null))},r=function(e){let{children:n}=e;return l.createElement("div",{className:"relative"},l.createElement("pre",null,n),l.createElement("div",{className:"absolute top-3 right-4"},l.createElement(o,{code:n})))};r.propTypes={children:s().arrayOf(s().element).isRequired};const d=r},5274:(e,n,t)=>{t.d(n,{Z:()=>a});var l=t(7294);const a=e=>{let{size:n="24px",className:t="",title:a,path:s}=e;const i="inline-block align-middle"+(t?` ${t}`:"");return l.createElement("i",{className:i,title:a},l.createElement("svg",{className:"micon",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",height:n,width:n,fill:"currentColor"},s))}},4233:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o});var l=t(7294),a=t(8093),s=t(3366),i=t(2192);var c=t(2873);const o=()=>l.createElement(l.Fragment,null,l.createElement(i.Z,{title:"Web views",nextUrl:"/laravel/web/assets"}),l.createElement("div",{className:"parser"},l.createElement(a.D,{rehypePlugins:[s.Z],children:'Blade is a simple yet powerfull templating engine. It allows fast development by offering directives, layout features and components.\nIt also allows the usage of plain php. The main feature of blade are:\n\n#### Blade directives\n\n@if, @foreach, @include and @php are an example of a long list of directive usefull to compose web pages and display data.\nWhen needed Blade can be extended by adding custom directives.\n\n#### Composition and inheritance\nOne of the most attractive features of blade is the views composition and inheritance. A general view layout can be defined as:\n\n```\n//layouts/main.blade.php\n\n<!DOCTYPE html>\n<html lang="{{ config(\'app.locale\') }}">\n<head>\n    @include(\'includes.head\')\n    @yield(\'head\')\n</head>\n<body>\n<div class="super-container">\n    <header>\n        @include(\'includes.header\')\n        @yield(\'header\')\n    </header>\n    <article>\n        <div class="main-container">\n            @yield(\'content\')\n        </div>\n    </article>\n\n    @yield(\'scripts\')\n    <footer>\n        @include(\'includes.footer\')\n    </footer>\n</div>\n</body>\n</html>\n```\n\nThe layout blade file would include a header file and a footer file imported using the @include directive.\nThe @yield directive would be used to include optional content coming from a child view. It defines an optional section.\n\nA child view would start by extending the layout file and optionally adding to its predefined sections by using the @section directive.\n\n```\n//pages/builder.php\n\n@extends(\'layouts.main\')\n\n@section(\'head\')\n    //load additional assets\n    <link href="{{ mix(\'/ccs/users.css\') }}" rel="stylesheet">\n    <script src="{{ mix(\'/js/users.js\') }}"><\/script>\n@endsection\n\n@section(\'content\')\n    // add html elements in the content section\n@endsection\n```\n\n#### Blade components\nReusable class based components can be generated by issuing the console command\n```\nphp artisan make:component Alert\n```\n\nThe created component view will be placed in the resources/views/components directory.\nA component class will be generated in the App/View/Components directory.\n\n```\n//App/View/Components/Alert.php\n\nnamespace App\\View\\Components;\n\nuse Illuminate\\View\\Component;\n\nclass Alert extends Component\n{\n    \n    public $type;\n    \n    public $message;\n\n    public function __construct($type, $message)\n    {\n        $this->type = $type;\n        $this->message = $message;\n    }\n\n    public function render()\n    {\n        return view(\'components.alert\');\n    }\n}\n```\n\nThe component view \n\n```\n//resources/views/components/alert.blade.php\n\n<div class="alert alert-{{ "{{ $type " }}}}">\n    {{ "{{ $message " }}}}\n</div>\n```\n\nTo display a component, place the component tag in blade where the tag name starts with the string x- followed by the kebab case name of the component class:\n\n```\n<x-alert type="error" :message="$message"/>\n```\n\nLaravel\'s x-components support slots and scoped slots.\n\n#### Reference\n<p class="m-0 mb-05"><a class="link" href="https://laravel.com/docs/8.x/blade" target="_blank">Laravel blade</a></p>\n\n',components:{pre:c.Z}})),l.createElement(i.Z,{nextUrl:"/laravel/web/assets"}))}}]);