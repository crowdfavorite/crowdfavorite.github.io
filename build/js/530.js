"use strict";(self.webpackChunkcrowdfavorite_github_io=self.webpackChunkcrowdfavorite_github_io||[]).push([[530],{1814:(e,t,n)=>{n.d(t,{Z:()=>E});var l=n(7294),a=n(5697),i=n.n(a);const r=function(e){let{title:t}=e;return l.createElement("h1",null,t)};r.propTypes={title:i().string.isRequired};const s=r;var o=n(9655);function c(e){let{size:t,className:n,title:a,path:i}=e;const r="inline-block align-middle"+(n?` ${n}`:"");return l.createElement("i",{className:r,title:a},l.createElement("svg",{className:"micon",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",height:t,width:t,fill:"currentColor"},i))}c.defaultProps={size:"24px",className:"",path:""},c.propTypes={size:i().string,className:i().string,title:i().string.isRequired,path:i().string};const u=c;function d(e){let{size:t="",className:n="",title:a=""}=e;return l.createElement(u,{size:t,className:n,title:a,path:l.createElement("path",{d:"M6 19h3v-6h6v6h3v-9l-6-4.5L6 10Zm-2 2V9l8-6 8 6v12h-7v-6h-2v6Zm8-8.75Z"})})}d.defaultProps={size:"24px",className:""},d.propTypes={size:i().string,className:i().string,title:i().string.isRequired};const p=d,m=function(){return l.createElement(o.rU,{to:"/",className:"action-link"},l.createElement(p,{title:"home",size:"20px"}),l.createElement("span",{className:"action-label"},"Home"))};function h(e){let{size:t,className:n,title:a}=e;return l.createElement(u,{size:t,className:n,title:a,path:l.createElement(l.Fragment,null,l.createElement("path",{d:"M0 0h24v24H0V0z",fill:"none"}),l.createElement("path",{d:"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"}))})}h.defaultProps={size:"24px",className:""},h.propTypes={size:i().string,className:i().string,title:i().string.isRequired};const g=h,b=function(e){let{url:t}=e;return l.createElement(o.rU,{className:"action-link",to:t},l.createElement(g,{title:"Next"}),l.createElement("span",{className:"action-label"},"Next"))};b.propTypes={url:i().string.isRequired};const f=b,w=function(e){let{downloadUrl:t,downloadFile:n}=e;return l.createElement("a",{className:"action-link download",href:""+("https://crowdfavorite.github.io"+t),download:n},l.createElement("i",{className:"micon micon-download micon-grey micon-xs"}),l.createElement("span",{className:"action-label"},"Download the code"))};w.propTypes={downloadUrl:i().string.isRequired,downloadFile:i().string.isRequired};const $=w,y=function(e){let{title:t,downloadUrl:n,downloadFile:a,nextUrl:i}=e;return l.createElement("div",{className:"action-bar"},t?l.createElement(s,{title:t}):null,l.createElement("div",{className:"actions"},n&&a?l.createElement($,{downloadUrl:n,downloadFile:a}):null,l.createElement(m,null),i?l.createElement(f,{url:i}):null))};y.defaultProps={title:null,nextUrl:null,downloadUrl:null,downloadFile:null},y.propTypes={title:i().string,nextUrl:i().string,downloadUrl:i().string,downloadFile:i().string};const E=y},6530:(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var l=n(7294),a=n(8093),i=n(3366),r=n(1814);function s(){return l.createElement(l.Fragment,null,l.createElement(r.Z,{title:"Builder",downloadUrl:"/code/patterns/builder/phoneBuilder.php",downloadFile:"phoneBuilder.php"}),l.createElement("div",{className:"parser"},l.createElement(a.D,{rehypePlugins:[i.Z],children:'### How to build?\nWe will start with an abstract class which helps in setting and getting the builder properties.\nThanks to the php maginc method `__set`, the attributes of a build object will be stores in the `$attributes` array.\nFollowing the gradual build up of an object we can return an object or an array representation of the built properties.\n\n```\nabstract class Builder\n{\n\tprotected array $attributes;\n\n\tpublic function __set($arg, $value)\n\t{\n\t\t$this->attributes[$arg] = $value;\n\t}\n\n\tpublic function first(): object\n\t{\n\t\treturn (object) $this->attributes;\n\t}\n\n\tpublic function toArray(): array\n\t{\n\t\treturn (array) $this->attributes;\n\t}\n}\n```\n\n<br>\n\nWe will consider building phones where the main components are pre-defined in the interface below. \nTo build a phone object we need to set the make, the model, the color and the capacity...etc...\n\n```\ninterface PhoneInterface\n{\n\tpublic function setMake(string $make);\n\n\tpublic function setModel(string $model);\n\n\tpublic function setColor(string $color);\n\n\tpublic function setCapacity(string $capacity);\n}\n```\n\nNow it\'s time to put in place a phone builder class.\n\n```\nclass PhoneBuilder extends Builder implements PhoneInterface\n{\n\tpublic function setMake(string $make): self\n\t{\n\t\t$this->make = $make;\n\n\t\treturn $this;\n\t}\n\n\tpublic function setModel(string $model): self\n\t{\n\t\t$this->model = $model;\n\n\t\treturn $this;\n\t}\n\n\tpublic function setColor(string $color): self\n\t{\n\t\t$this->color = $color;\n\n\t\treturn $this;\n\t}\n\n\tpublic function setCapacity(string $capacity): self\n\t{\n\t\t$this->capacity = $capacity;\n\n\t\treturn $this;\n\t}\n}\n```\n\nFinally we can start building phones.\n\n```\n $phones[] = (new PhoneBuilder())\n  \t->setMake(\'Apple\')\n  \t->setModel(\'iPhone 12\')\n\t->setColor(\'gold\')\n\t->setCapacity(\'128\')\n\t->toArray();\n\n$phones[] = (new PhoneBuilder())\n  \t->setMake(\'Samsung\')\n\t->setModel(\'A7\')\n\t->setColor(\'black\')\n\t->setCapacity(\'64\')\n\t->toArray();\n```\n\nThe phones array will look like:\n\n```\n[\n     [\n       "make" => "Apple",\n       "model" => "iPhone 12",\n       "color" => "gold",\n       "capacity" => "128",\n     ],\n     [\n       "make" => "Samsung",\n       "model" => "A7",\n       "color" => "black",\n       "capacity" => "64",\n     ],\n   ]\n```\n\n'})),l.createElement(r.Z,null))}}}]);