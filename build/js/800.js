"use strict";(self.webpackChunkcrowdfavorite_github_io=self.webpackChunkcrowdfavorite_github_io||[]).push([[800],{1814:(e,t,n)=>{n.d(t,{Z:()=>N});var l=n(7294),a=n(5697),r=n.n(a);const i=function(e){let{title:t}=e;return l.createElement("h1",null,t)};i.propTypes={title:r().string.isRequired};const o=i;var s=n(9655);function d(e){let{size:t,className:n,title:a,path:r}=e;const i="inline-block align-middle"+(n?` ${n}`:"");return l.createElement("i",{className:i,title:a},l.createElement("svg",{className:"micon",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",height:t,width:t,fill:"currentColor"},r))}d.defaultProps={size:"24px",className:"",path:""},d.propTypes={size:r().string,className:r().string,title:r().string.isRequired,path:r().string};const c=d;function m(e){let{size:t="",className:n="",title:a=""}=e;return l.createElement(c,{size:t,className:n,title:a,path:l.createElement("path",{d:"M6 19h3v-6h6v6h3v-9l-6-4.5L6 10Zm-2 2V9l8-6 8 6v12h-7v-6h-2v6Zm8-8.75Z"})})}m.defaultProps={size:"24px",className:""},m.propTypes={size:r().string,className:r().string,title:r().string.isRequired};const g=m,u=function(){return l.createElement(s.rU,{to:"/",className:"action-link"},l.createElement(g,{title:"home",size:"20px"}),l.createElement("span",{className:"action-label"},"Home"))};function p(e){let{size:t,className:n,title:a}=e;return l.createElement(c,{size:t,className:n,title:a,path:l.createElement(l.Fragment,null,l.createElement("path",{d:"M0 0h24v24H0V0z",fill:"none"}),l.createElement("path",{d:"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"}))})}p.defaultProps={size:"24px",className:""},p.propTypes={size:r().string,className:r().string,title:r().string.isRequired};const h=p,f=function(e){let{url:t}=e;return l.createElement(s.rU,{className:"action-link",to:t},l.createElement(h,{title:"Next"}),l.createElement("span",{className:"action-label"},"Next"))};f.propTypes={url:r().string.isRequired};const E=f,b=function(e){let{downloadUrl:t,downloadFile:n}=e;return l.createElement("a",{className:"action-link download",href:""+("https://crowdfavorite.github.io"+t),download:n},l.createElement("i",{className:"micon micon-download micon-grey micon-xs"}),l.createElement("span",{className:"action-label"},"Download the code"))};b.propTypes={downloadUrl:r().string.isRequired,downloadFile:r().string.isRequired};const w=b,v=function(e){let{title:t,downloadUrl:n,downloadFile:a,nextUrl:r}=e;return l.createElement("div",{className:"action-bar"},t?l.createElement(o,{title:t}):null,l.createElement("div",{className:"actions"},n&&a?l.createElement(w,{downloadUrl:n,downloadFile:a}):null,l.createElement(u,null),r?l.createElement(E,{url:r}):null))};v.defaultProps={title:null,nextUrl:null,downloadUrl:null,downloadFile:null},v.propTypes={title:r().string,nextUrl:r().string,downloadUrl:r().string,downloadFile:r().string};const N=v},8800:(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var l=n(7294),a=n(8093),r=n(3366),i=n(1814);var o=n(3286);function s(){return l.createElement(l.Fragment,null,l.createElement(i.Z,{title:"Plugin"}),l.createElement(o.a,{style:{marginBottom:"2rem"}},l.createElement(o.a.Item,{href:"/"},"Home"),l.createElement(o.a.Item,{href:"#/wordpress/plugin/logger"},"Logger"),l.createElement(o.a.Item,{href:"#/wordpress/plugin/logger",selected:!0},"Introduction")),l.createElement("div",{className:"parser"},l.createElement(a.D,{rehypePlugins:[r.Z],children:"The logger functionality is based on a PSR-3 interface. Logs can be save to a log file, emails and the database.\nAs a primary implementation we will limit the logging to a file.  \n\nThe implementation of the logger is based on the package monolog.  \n\nCustom log levels are not supported. Only eight RFC 5424 levels are available.\nThe supported log levels / helpers are:\n\n<table>\n<thead>\n<tr>\n    <td><b>Helper</b></td>\n    <td><b>Log level</b></td>\n    <td><b>Description</b></td>\n</tr>\n</thead>\n<tbody>\n<tr>\n    <td>debug</td>\n    <td>DEBUG(100)</td>\n    <td>Debug information.</td>\n</tr>\n<tr>\n    <td>info</td>\n    <td>INFO(200)</td>\n    <td>General events.</td>\n</tr>\n<tr>\n    <td>notice</td>\n    <td>NOTICE(250)</td>\n    <td>Significant events.</td>\n</tr>\n<tr>\n    <td>warning</td>\n    <td>WARNING(300)</td>\n    <td>Exceptional occurences but not errors.</td>\n</tr>\n<tr>\n    <td>error</td>\n    <td>ERROR(400)</td>\n    <td>Runtime errors which do not require immediate action.</td>\n</tr>\n<tr>\n    <td>critical</td>\n    <td>CRITICAL(500)</td>\n    <td>Critical conditions.</td>\n</tr>\n<tr>\n    <td>alert</td>\n    <td>ALERT(550)</td>\n    <td>Immediate action must be taken.</td>\n</tr>\n<tr>\n    <td>emergency</td>\n    <td>EMERGENCY(600)</td>\n    <td>Sytem is unusable.</td>\n</tr>\n</tbody>\n</table>\n\n<br>\n\nThe usage of the logger will be as\n\n```\nuse Core\\Facade\\Log;\n\nclass MyClass\n{\n    public function myMethod\n    {\n        //Log::helperMethod('message', [contextArray]);\n        Log::info('some message', ['logger' => __CLASS__, ....])\n    }\n}\n```\n\nThe registration in the log file will be\n\n```\n2021-03-31 16:25 > INFO > some message {\"logger\":\"MyClass\"}\n```\n\nThe configuration file of the logger is at:\n\n```\n//Core > Config > log.php\n\n[\n\t'defaultChannel' => 'console',\n\t'channels' => [\n\t\t'file' => [\n\t\t\t'dateFormat' => \"Y-m-d H:i:s\",\n\t\t\t'output' => \"%datetime% > %level_name% > %message% %context% %extra%\\n\",\n\t\t],\n\t\t'slack' => [\n\t\t\t'dateFormat' => \"Y-m-d H:i:s\",\n\t\t\t'output' => \"%datetime% > %level_name% > %message% %context% %extra%\\n\",\n\t\t\t'token' => 'xoxb-2883774866-2012686074454-laeDke1lOzZIA2J59FdTiUtv',\n\t\t\t'channel' => '#wordpressbot',\n\t\t\t'bot' => 'wpbot',\n\t\t]\n\t],\n]\n```\n"})),l.createElement(i.Z,null))}}}]);