"use strict";(self.webpackChunkcrowdfavorite_github_io=self.webpackChunkcrowdfavorite_github_io||[]).push([[49],{1814:(e,t,n)=>{n.d(t,{Z:()=>N});var l=n(7294),a=n(5697),r=n.n(a);const o=function(e){let{title:t}=e;return l.createElement("h1",null,t)};o.propTypes={title:r().string.isRequired};const s=o;var i=n(9655);function c(e){let{size:t,className:n,title:a,path:r}=e;const o="inline-block align-middle"+(n?` ${n}`:"");return l.createElement("i",{className:o,title:a},l.createElement("svg",{className:"micon",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",height:t,width:t,fill:"currentColor"},r))}c.defaultProps={size:"24px",className:"",path:""},c.propTypes={size:r().string,className:r().string,title:r().string.isRequired,path:r().string};const u=c;function d(e){let{size:t="",className:n="",title:a=""}=e;return l.createElement(u,{size:t,className:n,title:a,path:l.createElement("path",{d:"M6 19h3v-6h6v6h3v-9l-6-4.5L6 10Zm-2 2V9l8-6 8 6v12h-7v-6h-2v6Zm8-8.75Z"})})}d.defaultProps={size:"24px",className:""},d.propTypes={size:r().string,className:r().string,title:r().string.isRequired};const m=d,p=function(){return l.createElement(i.rU,{to:"/",className:"action-link"},l.createElement(m,{title:"home",size:"20px"}),l.createElement("span",{className:"action-label"},"Home"))};function h(e){let{size:t,className:n,title:a}=e;return l.createElement(u,{size:t,className:n,title:a,path:l.createElement(l.Fragment,null,l.createElement("path",{d:"M0 0h24v24H0V0z",fill:"none"}),l.createElement("path",{d:"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"}))})}h.defaultProps={size:"24px",className:""},h.propTypes={size:r().string,className:r().string,title:r().string.isRequired};const g=h,f=function(e){let{url:t}=e;return l.createElement(i.rU,{className:"action-link",to:t},l.createElement(g,{title:"Next"}),l.createElement("span",{className:"action-label"},"Next"))};f.propTypes={url:r().string.isRequired};const w=f,E=function(e){let{downloadUrl:t,downloadFile:n}=e;return l.createElement("a",{className:"action-link download",href:""+("https://crowdfavorite.github.io"+t),download:n},l.createElement("i",{className:"micon micon-download micon-grey micon-xs"}),l.createElement("span",{className:"action-label"},"Download the code"))};E.propTypes={downloadUrl:r().string.isRequired,downloadFile:r().string.isRequired};const b=E,v=function(e){let{title:t,downloadUrl:n,downloadFile:a,nextUrl:r}=e;return l.createElement("div",{className:"action-bar"},t?l.createElement(s,{title:t}):null,l.createElement("div",{className:"actions"},n&&a?l.createElement(b,{downloadUrl:n,downloadFile:a}):null,l.createElement(p,null),r?l.createElement(w,{url:r}):null))};v.defaultProps={title:null,nextUrl:null,downloadUrl:null,downloadFile:null},v.propTypes={title:r().string,nextUrl:r().string,downloadUrl:r().string,downloadFile:r().string};const N=v},8049:(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var l=n(7294),a=n(8093),r=n(3366),o=n(1814);function s(){return l.createElement(l.Fragment,null,l.createElement(o.Z,{title:"Web routes",nextUrl:"/laravel/web/controllers"}),l.createElement("div",{className:"parser"},l.createElement(a.D,{rehypePlugins:[r.Z],children:"Grouped in a the namespace 'Web', all the route requests are directed to the folder web located at:\n\n```\nApp > Http > Controllers > Web\n```\nA request is handled by a controller class method which returns a rendered html view.\n\n#### Web route\n```\nhttp://laravel.test/users\n```\nIn the web.php route file, we would define the route above as:\n\n```\nRoute::group(['namespace' => 'Web'], function() {\n    Route::get('/users', [RouteController::class, 'viewMethod'])->name('users.index');\n});\n```\n\nDefining the routes into nested groups is essential to allow the proper scaling of a project.\n\n#### Route nested groups\n```\nRoute::group(['namespace' => 'Web', function() {\n    \n    ... list of guest routes\n    \n    Route::group([\n        'middleware' => 'auth',\n    ], function() { \n        ... list of authenticated routes\n    });\n});\n```\n\n#### Catch all route\n\nPlaced at the end of the web routes file, a catch all route definition will be capturing all non defined route requests and routing them to a controller class.\n\n```\nRoute::get('/{method?}', function ($method = null) {\n\n        $pageController = app()->make(PageController::class);\n\n        if ($method !== null) {\n            return $pageController->{$method}();\n        }\n    });\n```\nThe catch all definition is an appropriate solution when the routing is handled by a Javascript library (Vue or React router). \n\n#### Reference\n<p class=\"m-0 mb-05\"><a class=\"link\" href=\"https://laravel.com/docs/8.x/routing\" target=\"_blank\">Laravel routing</a></p>\n\n"})),l.createElement(o.Z,{nextUrl:"/laravel/web/controllers"}))}}}]);