"use strict";(self.webpackChunkcrowdfavorite_github_io=self.webpackChunkcrowdfavorite_github_io||[]).push([[227],{1814:(e,n,t)=>{t.d(n,{Z:()=>b});var l=t(7294),a=t(5697),s=t.n(a);const i=function(e){let{title:n}=e;return l.createElement("h1",null,n)};i.propTypes={title:s().string.isRequired};const r=i;var o=t(9655);function c(e){let{size:n,className:t,title:a,path:s}=e;const i="inline-block align-middle"+(t?` ${t}`:"");return l.createElement("i",{className:i,title:a},l.createElement("svg",{className:"micon",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",height:n,width:n,fill:"currentColor"},s))}c.defaultProps={size:"24px",className:"",path:""},c.propTypes={size:s().string,className:s().string,title:s().string.isRequired,path:s().string};const m=c;function p(e){let{size:n="",className:t="",title:a=""}=e;return l.createElement(m,{size:n,className:t,title:a,path:l.createElement("path",{d:"M6 19h3v-6h6v6h3v-9l-6-4.5L6 10Zm-2 2V9l8-6 8 6v12h-7v-6h-2v6Zm8-8.75Z"})})}p.defaultProps={size:"24px",className:""},p.propTypes={size:s().string,className:s().string,title:s().string.isRequired};const d=p,u=function(){return l.createElement(o.rU,{to:"/",className:"action-link"},l.createElement(d,{title:"home",size:"20px"}),l.createElement("span",{className:"action-label"},"Home"))};function h(e){let{size:n,className:t,title:a}=e;return l.createElement(m,{size:n,className:t,title:a,path:l.createElement(l.Fragment,null,l.createElement("path",{d:"M0 0h24v24H0V0z",fill:"none"}),l.createElement("path",{d:"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"}))})}h.defaultProps={size:"24px",className:""},h.propTypes={size:s().string,className:s().string,title:s().string.isRequired};const g=h,w=function(e){let{url:n}=e;return l.createElement(o.rU,{className:"action-link",to:n},l.createElement(g,{title:"Next"}),l.createElement("span",{className:"action-label"},"Next"))};w.propTypes={url:s().string.isRequired};const f=w,E=function(e){let{downloadUrl:n,downloadFile:t}=e;return l.createElement("a",{className:"action-link download",href:""+("https://crowdfavorite.github.io"+n),download:t},l.createElement("i",{className:"micon micon-download micon-grey micon-xs"}),l.createElement("span",{className:"action-label"},"Download the code"))};E.propTypes={downloadUrl:s().string.isRequired,downloadFile:s().string.isRequired};const v=E,N=function(e){let{title:n,downloadUrl:t,downloadFile:a,nextUrl:s}=e;return l.createElement("div",{className:"action-bar"},n?l.createElement(r,{title:n}):null,l.createElement("div",{className:"actions"},t&&a?l.createElement(v,{downloadUrl:t,downloadFile:a}):null,l.createElement(u,null),s?l.createElement(f,{url:s}):null))};N.defaultProps={title:null,nextUrl:null,downloadUrl:null,downloadFile:null},N.propTypes={title:s().string,nextUrl:s().string,downloadUrl:s().string,downloadFile:s().string};const b=N},8227:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o});var l=t(7294),a=t(8093),s=t(3366),i=t(1814);var r=t(3286);function o(){return l.createElement(l.Fragment,null,l.createElement(i.Z,{title:"Plugin",nextUrl:"/wordpress/plugin/structure"}),l.createElement(r.a,{style:{marginBottom:"2rem"}},l.createElement(r.a.Item,{href:"/"},"Home"),l.createElement(r.a.Item,{href:"#/wordpress/plugin/introduction",selected:!0},"Introduction")),l.createElement("div",{className:"parser"},l.createElement(a.D,{rehypePlugins:[s.Z],children:"### Introduction\n\nA common design pattern for WordPress plugins is to have one “main class” that implements the singleton pattern.\nThe mail class loads all of the other classes the plugin needs. The singelton approach is a simple setup for small projects, however \nit becomes rapidly unmanageable as a project grows. The singleton “main class” needs to instantiate every one of those classes and store them in memory.\n\nExample of the singleton setup.\n\n```\n//plugin.php\n(new PluginController())::getInstance();\n.\n.\n.\n\n//PluginController.php\n/**\n * Return an instance of Plugin.\n *\n * @access public\n * @static\n *\n * @return Plugin\n */\npublic static function getInstance()\n{\n    if (empty(self::$instance)) {\n        self::$instance = new self;\n    }\n\n    return self::$instance;\n}\n```\n<br>\n\nThe alternative would be to develop in a dependency injection container. A container will be providing:\n* Lazy loading.\n* Dependency injection.\n* Container resolution.\n* Code decoupling.\n* Testable code.\n\nDue to it's auto wiring capability, the container will be resolving all classes and their dependencies.\n\n```\n//plugin.php\n\napp(PluginController::class);\n```\n\napp() is the helper method which resolves the container instance.\n\n\n\n\n\n"})),l.createElement(i.Z,{nextUrl:"/wordpress/plugin/structure"}))}}}]);